class n{constructor(e="localStorage"){if(this.storages={localStorage:window.localStorage,sessionStorage:window.sessionStorage},!this.storages[e])throw new Error(`Storage type ${e} does not exist.`);this.type=e,this.storage=this.storages[e],this.proxy=null,this.namespace=null}initNamespaceStorage(e){const t=this.storage,s=`${e}_ns`;this.namespace=e,t.getItem(s)||t.setItem(s,JSON.stringify({})),this.proxy=new Proxy({},{get:(o,a)=>JSON.parse(t.getItem(s))[a],set:(o,a,r)=>{let i=JSON.parse(t.getItem(s));return i||(i={}),i[a]=r,t.setItem(s,JSON.stringify(i)),!0},deleteProperty:(o,a)=>{let r=JSON.parse(t.getItem(s));return r||(r={}),delete r[a],t.setItem(s,JSON.stringify(r)),!0}})}getNamespace(){return this.namespace}namespaceStorages(){const e={};for(let t=0;t<this.storage.length;t++){const s=this.storage.key(t);s.endsWith("_ns")&&(e[s.slice(0,-3)]=this.type)}return e}get(e){if(!this.proxy)throw new Error("No namespace initialized.");return this.proxy[e]}set(e,t){if(!this.proxy)throw new Error("No namespace initialized.");this.proxy[e]=t}keys(){if(!this.proxy)throw new Error("No namespace initialized.");const e=`${this.namespace}_ns`,t=JSON.parse(this.storage.getItem(e));return t?Object.keys(t):[]}remove(e){if(!this.proxy)throw new Error("No namespace initialized.");delete this.proxy[e]}clear(){if(!this.proxy)throw new Error("No namespace initialized.");const e=`${this.namespace}_ns`;this.storage.removeItem(e)}}const c=new n;c.initNamespaceStorage("imooc");export{c as l};
